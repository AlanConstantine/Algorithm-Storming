# -*- coding: utf-8 -*-
# @Author: Alan Lau
# @Date: 2022-01-01 14:07:15

# 给你一个整数数组 cost ，其中 cost[i] 是从楼梯第 i 个台阶向上爬需要支付的费用。一旦你支付此费用，即可选择向上爬一个或者两个台阶。

# 你可以选择从下标为 0 或下标为 1 的台阶开始爬楼梯。

# 请你计算并返回达到楼梯顶部的最低花费。

#  

# 示例 1：

# 输入：cost = [10,15,20]
# 输出：15
# 解释：你将从下标为 1 的台阶开始。
# - 支付 15 ，向上爬两个台阶，到达楼梯顶部。
# 总花费为 15 。
# 示例 2：

# 输入：cost = [1,100,1,1,1,100,1,1,100,1]
# 输出：6
# 解释：你将从下标为 0 的台阶开始。
# - 支付 1 ，向上爬两个台阶，到达下标为 2 的台阶。
# - 支付 1 ，向上爬两个台阶，到达下标为 4 的台阶。
# - 支付 1 ，向上爬两个台阶，到达下标为 6 的台阶。
# - 支付 1 ，向上爬一个台阶，到达下标为 7 的台阶。
# - 支付 1 ，向上爬两个台阶，到达下标为 9 的台阶。
# - 支付 1 ，向上爬一个台阶，到达楼梯顶部。
# 总花费为 6 。

# 来源：力扣（LeetCode）
# 链接：https://leetcode-cn.com/problems/min-cost-climbing-stairs
# 著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。

class Solution:
    def minCostClimbingStairs(self, cost) -> int:
        # 假设数组cost的长度为n，则n个阶梯分别对应下标0到n-1，楼层顶部对应下标n，问题等价于计算达到下标n的最小花费。可以通过动态规划求解。

        # 和爬楼梯的题相似，只是加上了爬楼梯的代价
        # 爬当前楼梯，只需要考虑上一次爬楼梯的支付的代价
        # 而上一次的阶梯到当前阶梯有两种，一种是跨1阶，一种是跨2阶
        # 所有对比上一次的阶梯到当前阶梯的两种方式的最小代价加上当前阶梯的代价
        # 构建dp数组且长度为n+1， dp[i]表示当道下标i的最小花费代价
        # 因为可以选择从下标0或者1开始爬，所以dp[0]=dp[1]=0
        n = len(cost)
        dp = [0] * (n+1)
        dp[0] = dp[1] = 0
        # 而当i>1时，第i阶可以从i-1阶花费cost(i-1)的代价到i阶，也可以从i-2阶花费cost(i-2)的代价到达i阶
        # 对比两种方式取最小代，即得状态转移方程为：
        # dp[i] = min(dp[i-1]+cost[i-1], dp[i-2]+cost[i-2])
        for i in range(2, n+1):
            dp[i] = min(dp[i-1]+cost[i-1], dp[i-2]+cost[i-2])
        return dp[n]
